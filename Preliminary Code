import tensorflow as tf
from tensorflow import keras
import Bio as bio
import random
import numpy as np
import matplotlib.pyplot as plt
import scipy 
import sklearn
import statsmodels




random.seed(version=2)
inputfile="DNA_sequence_original.txt" #make sure to put your file in the right directory
f=open(inputfile,"r")
seq=f.read()

# >>>seq   #check the DNA sequence
#you will see "\n" characters messing with our DNA sequence, so we are cleaning them off the sequence.
seq=seq.replace("\n","") 
seq=seq.replace("\r","")

def point_mut(seq):
    z=len(seq)
    
    l=list(seq)
    n=3
    for i in range(n):
        d=random.randint(0,z-1)
        x=random.choice(l)
        l[d]=x
        print(d , '\n' , x , '\n')
    seq = str("".join(l))
    return seq

pseq=point_mut(seq)
print(pseq,'\n')





"""
    Translate a string containing a nucleotide sequence into a string containing the corresponding sequence of amino acids .
    Nucleotides are translated in triplets using the table dictionary; each amino acid 4 is encoded with a string of length 1.
"""
def translate(seq):
    table = {
        'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M',
        'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T',
        'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K',
        'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',                  #this table dictionary is pre-created
        'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L',
        'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P',
        'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q',
        'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R',
        'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V',
        'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A',
        'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E',
        'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G',
        'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S',
        'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L',
        'TAC':'Y', 'TAT':'Y', 'TAA':'_', 'TAG':'_',
        'TGC':'C', 'TGT':'C', 'TGA':'_', 'TGG':'W',
    }
    protein=""
    if len(seq)%3==0:
        for i in range(0,len(seq),3):
            codon=seq[i:i+3]
            protein+=table[codon]
return protein
